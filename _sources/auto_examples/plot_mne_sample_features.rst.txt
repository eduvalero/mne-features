.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_mne_sample_features.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_mne_sample_features.py:


========================================================
Extract features from MEG time series for classification
========================================================

The code for this example is based on the method proposed in:

Jean-Baptiste SCHIRATTI, Jean-Eudes LE DOUGET, Michel LE VAN QUYEN,
Slim ESSID, Alexandre GRAMFORT,
"An ensemble learning approach to detect epileptic seizures from long
intracranial EEG recordings"
Proc. IEEE ICASSP Conf. 2018

.. note::

    This example is for illustration purposes, as other methods
    may lead to better performance on such a dataset (classification
    of auditory vs. visual stimuli).


.. code-block:: default


    # Author: Jean-Baptiste Schiratti <jean.baptiste.schiratti@gmail.com>
    #         Alexandre Gramfort <alexandre.gramfort@inria.fr>
    # License: BSD 3 clause

    import mne
    import numpy as np
    from mne.datasets import sample
    from sklearn.linear_model import LogisticRegression
    from sklearn.model_selection import cross_val_score, KFold
    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler

    from mne_features.feature_extraction import extract_features

    print(__doc__)








Let us import the data using MNE-Python and epoch it:


.. code-block:: default


    data_path = sample.data_path()
    raw_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw.fif'
    event_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw-eve.fif'
    tmin, tmax = -0.2, 0.5
    event_id = dict(aud_l=1, vis_l=3)

    # Setup for reading the raw data
    raw = mne.io.read_raw_fif(raw_fname, preload=True)
    raw.filter(.5, None, fir_design='firwin')
    events = mne.read_events(event_fname)
    picks = mne.pick_types(raw.info, meg='grad', eeg=False)

    # Read epochs
    epochs = mne.Epochs(raw, events, event_id, tmin, tmax, picks=picks, proj=True,
                        baseline=None, preload=True)
    labels = epochs.events[:, -1]

    # get MEG and EEG data
    data = epochs.get_data()








Prepare for the classification task:


.. code-block:: default


    pipe = Pipeline([('scaler', StandardScaler()),
                     ('lr', LogisticRegression(random_state=42, solver='lbfgs'))])
    y = labels








Classification using features (mean, peak-to-peak amplitude,
standard deviation). See :ref:`api_documentation` for full list of supported
features.


.. code-block:: default


    selected_funcs = {'mean', 'ptp_amp', 'std'}
    X_new = extract_features(data, raw.info['sfreq'], selected_funcs)
    kf = KFold(n_splits=3, random_state=42)
    scores = cross_val_score(pipe, X_new, y, scoring='accuracy', cv=kf)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /Users/alex/miniconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:297: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.
      FutureWarning




Print the cross-validation score:


.. code-block:: default


    print('Cross-validation accuracy score = %1.3f (+/- %1.5f)' % (np.mean(scores),
                                                                   np.std(scores)))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Cross-validation accuracy score = 0.938 (+/- 0.00060)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.066 seconds)


.. _sphx_glr_download_auto_examples_plot_mne_sample_features.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_mne_sample_features.py <plot_mne_sample_features.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_mne_sample_features.ipynb <plot_mne_sample_features.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
